import sqlite3

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.types import ReplyKeyboardRemove

from configs.bot_configs import bot, main_menu_message, dp
from configs.form_making_configs import questions
import random

from configs.models.checking_for_information.checking_for_information import is_informative
from configs.models.emotionality_emotionality.assessment_emotionality import assessment_emotionality

conn = sqlite3.connect(r'interface/database/students_feedback.db')
cursor = conn.cursor()

temporarily_dict = {}
temporarily_dict_feedback = {}


class Mailing(StatesGroup):
    lecture_name = State()
    group = State()
    form = State()


class Form(StatesGroup):
    questions_count = State()


class Feedback(StatesGroup):
    evaluation = State()
    review = State()


async def random_form_making(message: types.Message):
    questions_count = int(message.text)
    random_form = [random.choice(questions) for _ in range(questions_count)]
    return random_form


@dp.message_handler(state=Mailing.lecture_name)
async def handle_lecture_name(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                                         "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", 1)
    else:
        cursor.execute("SELECT MAX(lecture_id) FROM lectures")
        row = cursor.fetchone()

        if row[0] is not None:
            latest_lecture_id = int(row[0]) + 1
        else:
            latest_lecture_id = 1

        temporarily_dict[message.from_user.id] = [latest_lecture_id, message.text]
        await message.answer(f"‚úÖ–õ–µ–∫—Ü–∏—è <b>{message.text}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n"
                             f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É</b>, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞")
        await state.update_data(lecture_id=latest_lecture_id)
        await state.set_state(Mailing.group)


@dp.message_handler(state=Mailing.group)
async def handle_group(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                                         "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", 1)
    else:
        form_setting_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üé≤–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ä–º—É", "‚úçÔ∏è–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –≤ —Ä—É—á–Ω—É—é"]
        form_setting_menu.add(*buttons)
        form_setting_menu.add("üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        temporarily_dict[message.from_user.id].append(message.text)
        await message.answer(f"üì®–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ <b>{message.text}</b>.\n"
                             f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ <b>—Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É</b>. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã",
                             reply_markup=form_setting_menu)
        await state.set_state(Mailing.form)


@dp.message_handler(state=Mailing.form)
async def handle_group(message: types.Message, state: FSMContext):
    back_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu.add("üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    if message.text == "üé≤–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ä–º—É":
        await message.answer(f"üî¢–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–µ? <b>–ú–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º {len(questions)}</b>",
                             reply_markup=back_menu)
        await state.set_state(Form.questions_count)
    elif message.text == "‚úçÔ∏è–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –≤ —Ä—É—á–Ω—É—é":
        await manual_form_making()
    elif message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                                         "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", 1)
    else:
        await message.answer("‚ùå<b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.</b> –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


@dp.message_handler(state=Form.questions_count)
async def handle_questions_count(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                                         "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", 1)
        return
    else:
        try:
            questions_count = int(message.text)
            if questions_count < 1 or questions_count > len(questions):
                raise ValueError
        except ValueError:
            await message.answer("‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        cursor.execute(f"SELECT user_id, first_name, last_name FROM teachers WHERE user_id = {message.from_user.id}")
        result_t = cursor.fetchone()

        if result_t:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É", callback_data="send_form"))
            keyboard.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="delete_form_and_return_to_main_menu"))

            random_form = await random_form_making(message)
            form = (f'üìã<b>–§–æ—Ä–º–∞ –æ—Ç {result_t[1]} {result_t[2]}</b>\n'
                    f'–ü–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –ª–µ–∫—Ü–∏–∏: <b>{temporarily_dict[message.from_user.id][1]}</b>\n')
            for i in random_form:
                form += f'üîπ{i}\n'

            temporarily_dict[message.from_user.id].append(form)

            await message.answer(form, reply_markup=keyboard)
            await state.finish()
        else:
            await main_menu_message(message, "‚ùå–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.", 0)


@dp.callback_query_handler(text="send_form")
async def send_form(call: types.CallbackQuery):
    lecture_id, lecture_name, group_name, form = temporarily_dict[call.from_user.id]
    teacher_id = call.from_user.id
    form = f'ID –ª–µ–∫—Ü–∏–∏: {lecture_id}\n' + form

    educational_institution_name = \
        cursor.execute(f"SELECT educational_institution FROM teachers WHERE user_id = {call.from_user.id}").fetchone()[
            0]

    student_list = cursor.execute("SELECT user_id, group_name, educational_institution FROM students").fetchall()

    feedback_menu = types.InlineKeyboardMarkup()
    feedback_menu.add(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"))
    for student in student_list:
        if student[2] == educational_institution_name and student[1] == group_name:
            await bot.send_message(student[0], form, reply_markup=feedback_menu, parse_mode="HTML")

    cursor.execute(
        "INSERT INTO lectures (lecture_name, teacher_id, group_name, lecture_form, evaluation_lecture_sum, evaluation_lecture_count, reviews) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (lecture_name, teacher_id, group_name, form, 0, 0, ""))
    conn.commit()

    await main_menu_message(call, "‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", 1)


@dp.callback_query_handler(text="delete_form_and_return_to_main_menu")
async def delete_form_and_return_to_main_menu(call: types.CallbackQuery):
    await call.message.delete()
    await main_menu_message(call, "–§–æ—Ä–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", 1)


@dp.callback_query_handler(text='leave_review')
async def leave_review(call: types.CallbackQuery, state: FSMContext):
    back_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu.add("üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    lecture_id = call.message.text.split()[2]
    await call.message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –æ—Ç 1 –¥–æ 10 –≤—ã –±—ã –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é –ª–µ–∫—Ü–∏—é?", reply_markup=back_menu)
    await state.set_state(Feedback.evaluation)
    await state.update_data(lecture_id=lecture_id)


@dp.message_handler(state=Feedback.evaluation)
async def handle_evaluation(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", 1)
    else:
        try:
            evaluation = int(message.text)
            if evaluation < 1 or evaluation > 10:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return
        temporarily_dict_feedback[message.from_user.id] = [evaluation]

        await message.answer(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {evaluation} –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ÃÜ –æ—Ç–∑—ã–≤\n\n"
                             f"–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –≤—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã")
        await state.set_state(Feedback.review)


@dp.message_handler(state=Feedback.review)
async def handle_review(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", 1)
    else:
        data = await state.get_data()
        lecture_id = data.get('lecture_id')

        if lecture_id is None:
            return

        review, evaluation = message.text, temporarily_dict_feedback[message.from_user.id][0]
        emotionality = await assessment_emotionality(review)

        if is_informative(review):
            cursor.execute(
                "SELECT evaluation_lecture_sum, evaluation_lecture_count, reviews FROM lectures WHERE lecture_id = ?",
                (lecture_id,))

            row = cursor.fetchone()
            if row is not None:
                current_evaluation_sum, current_evaluation_counter, current_review = float(row[0]), int(row[1]), str(row[2])
                new_evaluation = current_evaluation_sum + evaluation
                new_current_evaluation_counter = current_evaluation_counter + 1
                new_review = current_review + emotionality + review + "\n\n"

                cursor.execute(
                    "UPDATE lectures SET evaluation_lecture_sum = ?, evaluation_lecture_count = ?, reviews = ? WHERE lecture_id = ?",
                    (new_evaluation, new_current_evaluation_counter, new_review, lecture_id))
                conn.commit()

                await main_menu_message(message, f"–í–∞—à –æ—Ç–∑—ã–≤: {review} –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ.", 0)
                await state.finish()
            else:
                await main_menu_message(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞', 0)
        else:
            await message.answer('<b>–û—Ç–∑—ã–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω.</b>\n\n'
                                 '–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –µ—â–µ —Ä–∞–∑.\n\n')
