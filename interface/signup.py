import sqlite3

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.types import ReplyKeyboardRemove

from configs.bot_configs import dp, main_menu_message

password = '1234'
conn = sqlite3.connect('interface/database/students_feedback.db')
cursor = conn.cursor()


class SignUpTeacher(StatesGroup):
    password = State()
    name_and_institution = State()


class SignUpStudent(StatesGroup):
    name_and_institution = State()


async def teacher_password_waiting(message: types.Message, state: FSMContext):
    await message.answer("üîê<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —É—á–∏—Ç–µ–ª—å.</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SignUpTeacher.password)


@dp.message_handler(state=SignUpTeacher.password)
async def handle_teacher_password(message: types.Message, state: FSMContext):
    if message.text == password:
        await sign_up_teacher(message, state)
    else:
        await state.update_data(password=message.text)
        await teacher_password_waiting(message, state)
        await message.answer("‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def sign_up_teacher(message: types.Message, state: FSMContext):
    await message.answer('‚úÖ<b>–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –≤–µ—Ä–Ω–æ.</b>\n\n'
                         'üë§–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –£—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                         '–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–§–¢–ò</b>')
    await state.set_state(SignUpTeacher.name_and_institution)


@dp.message_handler(state=SignUpTeacher.name_and_institution)
async def teacher_su(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 3:
        await message.answer(
            '‚ùå<b>–§–∞–º–∏–ª–∏—è, –∏–º—è –∏–ª–∏ —É—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–§–¢–ò</b>')
    else:
        first_name, last_name, educational_institution = message.text.split()
        cursor.execute(
            "INSERT INTO teachers (user_id, first_name, last_name, educational_institution) VALUES (?, ?, ?, ?)",
            (message.chat.id, first_name, last_name, educational_institution))
        conn.commit()
        await main_menu_message(message, f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name} {last_name},\n –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', 1)
        await state.finish()


async def sign_up_student(message: types.Message, state: FSMContext):
    await message.answer('üë§–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é, –ò–º—è, –£—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≥—Ä—É–ø–ø—É</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                         '–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–§–¢–ò 43</b>', reply_markup=ReplyKeyboardRemove())
    await state.set_state(SignUpStudent.name_and_institution)


@dp.message_handler(state=SignUpStudent.name_and_institution)
async def student_su(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 4:
        await message.answer(
            '‚ùå<b>–§–∞–º–∏–ª–∏—è, –∏–º—è, —É—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–§–¢–ò 43</b>')
    else:
        first_name, last_name, educational_institution, group_name = message.text.split()
        cursor.execute(
            "INSERT INTO students (user_id, first_name, last_name, educational_institution, group_name) VALUES (?, ?, ?, ?, ?)",
            (message.chat.id, first_name, last_name, educational_institution, group_name))
        conn.commit()
        await main_menu_message(message, f'üëè–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name} {last_name},\n –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', 0)
        await state.finish()
